services:
  loki:
    image: grafana/loki:${LOKI_VERSION}
    container_name: loki
    user: "0:0"
    ports:
      - "3100:3100"
      - "9096:9096"
    volumes:
      - ./docker/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  tempo:
    image: grafana/tempo:${TEMPO_VERSION}
    container_name: tempo
    user: "0:0"
    volumes:
      - ./docker/tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - tempo_data:/tmp/tempo
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    ports:
      - "3200:3200"
      - "4319:4317"
      - "4320:4318"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 10s
      timeout: 5s
      retries: 15
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=native-histograms'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:${OTEL_COLLECTOR_VERSION}
    container_name: otel-collector
    volumes:
      - ./docker/otel-collector/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
      - otel_logs:/tmp 
    ports:
      - 8889:8889  
      - 13133:13133
      - 4317:4317
      - 4318:4318
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    restart: unless-stopped

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/etc/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      otel-collector:
        condition: service_started
    restart: unless-stopped

  db:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: loadsdb
    ports:
      - "5432:5432"
    volumes:
      - reloading_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d loadsdb"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  keycloak-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: keycloak-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
    ports:
      - "5433:5432"
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: user
      KC_DB_PASSWORD: password
      KC_HTTP_PORT: 7080
      KC_HOSTNAME: keycloak
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_TRACING_ENABLED: true
      KC_TRACING_ENDPOINT: http://otel-collector:4317
      KC_TRACING_SAMPLER_TYPE: parentbased_traceidratio
      KC_TRACING_JDBC_ENABLED: false
      QUARKUS_OTEL_TRACES_SUPPRESS_NON_APPLICATION_URIS: true
    ports:
      - "7080:7080"
      - "9000:9000"
    depends_on:
      otel-collector:
        condition: service_started
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
      interval: 15s
      timeout: 2s
      retries: 15
    volumes:
      - ./docker/keycloak/realm/realm.json:/opt/keycloak/data/import/realm.json
    command: ["start-dev", "--import-realm"]
    restart: unless-stopped

  config-server:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-config-server:${PROJECT_VERSION}
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8888
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  discovery-server:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-discovery-server:${PROJECT_VERSION}
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8761
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api-gateway:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-api-gateway:${PROJECT_VERSION}
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED=true
      - SPRING_CLOUD_DISCOVERY_ENABLED=true
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8080
    depends_on:
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  components-service:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-components-service:${PROJECT_VERSION}
    container_name: components-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED=true
      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5432/loadsdb
      - SPRING_R2DBC_USERNAME=user
      - SPRING_R2DBC_PASSWORD=password
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8084
    depends_on:
      db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rifles-service:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-rifles-service:${PROJECT_VERSION}
    container_name: rifles-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED=true
      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5432/loadsdb
      - SPRING_R2DBC_USERNAME=user
      - SPRING_R2DBC_PASSWORD=password
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8081
    depends_on:
      db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
      
  loads-service:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-loads-service:${PROJECT_VERSION}
    container_name: loads-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED=true
      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5432/loadsdb
      - SPRING_R2DBC_USERNAME=user
      - SPRING_R2DBC_PASSWORD=password
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8082
    depends_on:
      db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mcp-server:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-mcp-server:${PROJECT_VERSION}
    container_name: mcp-server
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED=true
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=8083
    depends_on:
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  admin-server:
    image: zhoozhoo.ca/spring-load-development/spring-loaddev-admin-server:${PROJECT_VERSION}
    container_name: admin-server
    ports:
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - DISCOVERY_SERVER=http://discovery-server:8761
      - KEYCLOAK_BASE_URL=http://keycloak:7080
      - THC_PATH=/actuator/health/readiness
      - THC_PORT=9090
    depends_on:
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  reloading_data:
  keycloak_data:
  tempo_data:
  loki_data:
  prometheus_data:
  otel_logs: